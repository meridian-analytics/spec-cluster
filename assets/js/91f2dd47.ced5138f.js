"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[666],{2350:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=s(1085),i=s(1184);const o={sidebar_position:3,title:"Scene"},t=void 0,c={id:"modules/components/scene",title:"Scene",description:"The Scene component renders a 3D visualization of the provided spectrograms, allowing user interaction and selection. It manages the following:",source:"@site/docs/modules/components/scene.md",sourceDirName:"modules/components",slug:"/modules/components/scene",permalink:"/spec-cluster/docs/modules/components/scene",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Scene"},sidebar:"mainSidebar",previous:{title:"Shape",permalink:"/spec-cluster/docs/modules/components/shape"},next:{title:"Interface",permalink:"/spec-cluster/docs/modules/components/interface"}},l={},d=[{value:"SceneProps",id:"sceneprops",level:2},{value:"Spectrogram Type",id:"spectrogram-type",level:2},{value:"Usage Example",id:"usage-example",level:2}];function a(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Scene"})," component renders a 3D visualization of the provided spectrograms, allowing user interaction and selection. It manages the following:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Canvas Setup"}),": Initializes a Three.js canvas with a specified camera position and event handling for selection clearing."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lighting"}),": Configures ambient and directional lighting in the scene."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rendering Spectrograms"}),": Based on the ",(0,r.jsx)(n.code,{children:"renderMode"}),", it either renders the spectrograms as images using the ",(0,r.jsx)(n.code,{children:"Spec"})," component or as shapes using the ",(0,r.jsx)(n.code,{children:"Shape"})," component."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Selection Handling"}),": Allows multiple spectrograms to be selected through mouse interactions when displayed as shapes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Camera Controls"}),": Implements orbit controls to navigate around the scene."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"sceneprops",children:"SceneProps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"spectrograms"})}),": An array of ",(0,r.jsx)(n.code,{children:"Spectrogram"})," objects to be rendered in the scene."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"camera"})}),": Optional camera settings including the position in 3D space."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"controls"})}),": Optional camera control settings to constrain camera movement."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"light"})}),": Optional lighting settings including the position of directional light."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"renderDotSize"})}),": Size of the rendered entities (if using dot mode)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dotColor"})}),": Color of the rendered entities (if using dot mode)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"onSpecClick"})}),": Callback function triggered when a spectrogram is clicked."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"renderMode"})}),': Determines how the spectrograms are rendered - as "image" or "dot".']}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'export type SceneProps = {\n  spectrograms: Spectrogram[]\n  camera?: {\n    position?: Three.Vector3\n  }\n  controls?: {\n    minAzimuthAngle?: number\n    maxAzimuthAngle?: number\n    minPolarAngle?: number\n    maxPolarAngle?: number\n    maxDistance?: number\n    minDistance?: number\n  }\n  light?: {\n    position?: Three.Vector3\n  }\n  renderDotSize?: ShapeProps["size"]\n  dotColor?: ShapeProps["color"]\n  onSpecClick?: (point: Spectrogram) => void\n  renderMode: "image" | "dot"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"spectrogram-type",children:"Spectrogram Type"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"filename"})}),": The name of the spectrogram file."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dim1"})}),", ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dim2"})}),", ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dim3"})}),": Spatial dimensions of the spectrogram used for positioning in 3D space."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"size"})}),": The size of the entity representation (if applicable)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"color"})}),": The color of the spectrogram, specified as a hex code or English color name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"width"})}),", ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"height"})}),": Dimensions for rendering the image."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"label"})}),": A descriptive label for the spectrogram."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"flocation"})}),": A fake location made up for the spectrogram data."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"shape"})}),": The shape of the spectrogram"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export type Spectrogram = {\n  filename: string\n  dim1: number\n  dim2: number\n  dim3: number\n  size: number\n  color: string\n  width: number\n  height: number\n  label: string\n  flocation: string\n  shape: string\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsxs)(n.p,{children:["To use the ",(0,r.jsx)(n.code,{children:"Scene"})," component, import it and include it in your demo app. Customize it by passing the necessary props.\nBelow is an example of how it is used in the spec visualization demo."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'<Scene\n    renderMode="image"\n    spectrograms={Array.from(spectrograms.values())}\n    controls={{\n        minAzimuthAngle: -Math.PI / 4,\n        maxAzimuthAngle: Math.PI / 4,\n        minPolarAngle: Math.PI / 6,\n        maxPolarAngle: Math.PI - Math.PI / 6,\n        maxDistance: 120,\n        minDistance: 5,\n    }}\n    onSpecClick={point => {\n        setFocusedItem(point)\n    }}\n/>\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},1184:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(4041);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);