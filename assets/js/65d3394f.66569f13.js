"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7165],{7826:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>a,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var s=t(1085),i=t(1184);const o={sidebar_position:1,title:"Spec"},r=void 0,c={id:"modules/components/spec",title:"Spec",description:"The Spec component is a React component built with @react-three/fiber and @react-three/drei. It renders a 3D plane with a texture loaded from a provided URL and supports interaction through a click event.",source:"@site/docs/modules/components/spec.md",sourceDirName:"modules/components",slug:"/modules/components/spec",permalink:"/spec-cluster/docs/modules/components/spec",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Spec"},sidebar:"mainSidebar",previous:{title:"Get Started",permalink:"/spec-cluster/docs/get-started"},next:{title:"Shape",permalink:"/spec-cluster/docs/modules/components/shape"}},l={},p=[{value:"<code>SpecProps</code>",id:"specprops",level:2},{value:"Component Structure",id:"component-structure",level:2},{value:"Usage Example",id:"usage-example",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Spec"})," component is a React component built with ",(0,s.jsx)(n.code,{children:"@react-three/fiber"})," and ",(0,s.jsx)(n.code,{children:"@react-three/drei"}),". It renders a 3D plane with a texture loaded from a provided URL and supports interaction through a click event."]}),"\n",(0,s.jsx)(n.h2,{id:"specprops",children:(0,s.jsx)(n.code,{children:"SpecProps"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Spec"})," component accepts the following props:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"position"}),": Specifies the position of the plane in 3D space."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"url"}),": URL of the texture to be applied to the plane."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the plane, stored in ",(0,s.jsx)(n.code,{children:"userData"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onClick"})," (optional): An event handler function triggered when the plane is clicked."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"showID"})," (optional): A boolean that determines whether to display the label."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"size"}),": Defines the size of the plane using the arguments for the ",(0,s.jsx)(n.code,{children:"PlaneGeometry"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"label"}),": The text label to display if ",(0,s.jsx)(n.code,{children:"showID"})," is true."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'export type SpecProps = {\n  position: ThreeFiber.MeshProps["position"];\n  url: string;\n  id: string;\n  onClick?: ThreeFiber.MeshProps["onClick"];\n  showID?: boolean;\n  size: ThreeFiber.PlaneGeometryProps["args"];\n  label: string;\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"component-structure",children:"Component Structure"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The component renders a ",(0,s.jsx)(n.code,{children:"mesh"})," containing a plane geometry with a texture:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"return (\n  <mesh\n    position={props.position}\n    onClick={props.onClick}\n    userData={{ id: props.id }}\n  >\n    <planeGeometry args={props.size} />\n    <meshStandardMaterial map={texture} />\n   <...>\n  </mesh>\n);\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"meshStandardMaterial"})," uses the loaded texture from the ",(0,s.jsx)(n.code,{children:"url"})," prop to texture the plane. Refer to the ",(0,s.jsx)(n.code,{children:"spec-visualization"})," demo to see how this is implemented with spectrogram images."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The plane can also respond to click events via the ",(0,s.jsx)(n.code,{children:"onClick"})," prop, allowing for user interaction."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsxs)(n.p,{children:["To use the ",(0,s.jsx)(n.code,{children:"Spec"})," component, import it and include it in your Three.js scene, passing the necessary props. Below is an example of how it is used in the ",(0,s.jsx)(n.code,{children:"Scene"})," component."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import Spec from './path/to/Spec';\n<Spec\n    key={point.filename}\n    url={`/spectrogram_plots/${point.filename}_spectrogram.png`}\n    position={[\n        point.dim1 * scaleX,\n        point.dim2 * scaleY,\n        point.dim3 * scaleZ,\n    ]}\n    id={point.filename}\n    size={[point.width, point.height, 64, 64]}\n    label={point.label}\n    showID={selection.has(point.filename)}\n    onClick={() => props.onSpecClick?.(point)}\n/>\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(4041);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);