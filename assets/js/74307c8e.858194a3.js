"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2904],{8640:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var o=t(1085),s=t(1184);const r={sidebar_position:2,title:"Configurator"},i=void 0,a={id:"modules/contexts/configurator",title:"Configurator",description:"This module provides a context for adjusting the axes position and rendering mode in a React application. It allows users to dynamically change the rendering mode (image or dot) and scale factors for the X, Y, and Z axes.",source:"@site/docs/modules/contexts/configurator.md",sourceDirName:"modules/contexts",slug:"/modules/contexts/configurator",permalink:"/spec-cluster/docs/modules/contexts/configurator",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Configurator"},sidebar:"mainSidebar",previous:{title:"User Data",permalink:"/spec-cluster/docs/modules/contexts/user-data"},next:{title:"Selection",permalink:"/spec-cluster/docs/modules/contexts/selection"}},c={},d=[{value:"RenderMode Enum",id:"rendermode-enum",level:3},{value:"Context API",id:"context-api",level:3},{value:"Provider Component",id:"provider-component",level:3},{value:"Usage",id:"usage",level:4},{value:"useContext Hook",id:"usecontext-hook",level:3},{value:"Usage",id:"usage-1",level:4}];function l(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"This module provides a context for adjusting the axes position and rendering mode in a React application. It allows users to dynamically change the rendering mode (image or dot) and scale factors for the X, Y, and Z axes."}),"\n",(0,o.jsx)(n.h3,{id:"rendermode-enum",children:"RenderMode Enum"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"export enum RenderMode {\n  image = 0,\n  dot = 1,\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"An enumeration that defines the rendering modes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"image"}),": Renders as an image."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"dot"}),": Renders as dots."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This enumeration provides a simple way to toggle between two different visualization modes in the UI. The RenderMode enum is typically used in scenarios where you want to provide users the ability to switch between different visual representations, such as viewing a Spectrogram as an image or as a scatter plot of points (dots)."}),"\n",(0,o.jsx)(n.h3,{id:"context-api",children:"Context API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"export type Context = {\n  renderMode: RenderMode\n  scaleX: number\n  scaleY: number\n  scaleZ: number\n  setRenderMode: (value: RenderMode) => void\n  setScaleX: (value: number) => void\n  setScaleY: (value: number) => void\n  setScaleZ: (value: number) => void\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Contains:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"renderMode"}),": Current rendering mode."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"scaleX"}),": Scale factor along the X-axis."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"scaleY"}),": Scale factor along the Y-axis."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"scaleZ"}),": Scale factor along the Z-axis."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"setRenderMode"}),": Function to set the rendering mode."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"setScaleX"}),": Function to set the X-axis scale."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"setScaleY"}),": Function to set the Y-axis scale."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"setScaleZ"}),": Function to set the Z-axis scale."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"provider-component",children:"Provider Component"}),"\n",(0,o.jsx)(n.p,{children:"The configurator provider component is responsible for managing the rendering mode and scaling factors in the context. It validates the rendering mode using the utility Util.invariantEnum, ensuring that only valid RenderMode values are used."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"export const Provider = (props: ProviderProps) => { ... }\n"})}),"\n",(0,o.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.p,{children:"Wrap the components where you want to access the configurator context with the configurator provider."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"<Configurator.Provider>\n  <YourComponent />\n</Configurator.Provider>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"usecontext-hook",children:"useContext Hook"}),"\n",(0,o.jsx)(n.p,{children:"The useContext custom hook allows functional components to access and interact with the configurator context."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"export const useContext = () => {\n  return React.useContext(Context)\n}\n"})}),"\n",(0,o.jsx)(n.h4,{id:"usage-1",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"const { renderMode, setRenderMode, scaleX, setScaleX } = useContext();\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(4041);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);